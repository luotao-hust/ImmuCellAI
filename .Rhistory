devtools::build()
devtools::load_all()
devtools::load_all()
devtools::load_all()
ImmuCellAI::self_sig()
ImmuCellAI::self_sig
devtools::load_all()
devtools::load_all()
devtools::use_data_raw()
devtools::use_dat()
devtools::use_data()
usethis::use_data_raw()
devtools::use_data()
devtools::load_all()
devtools::use_data()
devtools::load_all()
devtools::load_all()
print(args)
devtools::load_all()
devtools::load_all()
devtools::load_all()
getwd(*)
getwd()
ggplot
library(ggplot2)
ggplot
getResult("data/example.txt","rnaseq",0,0,0)
devtools::load_all()
getResult("data/example.txt","rnaseq",0,0,0)
devtools::load_all()
getResult("data/example.txt","rnaseq",0,0,0)
getResult
devtools::load_all()
getResult("data/example.txt","rnaseq",0,0,0)
ggplot
ls()
T_FRE
devtools::load_all()
getResult("data/example.txt","rnaseq",0,0,0)
T_FRE
devtools::load_all()
getResult("data/example.txt","rnaseq",0,0,0)
devtools::load_all()
getResult("data/example.txt","rnaseq",0,0,0)
plot_fun
getResult("data/example.txt","rnaseq",0,0,0)
devtools::load_all()
getResult("data/example.txt","rnaseq",0,0,0)
devtools::load_all()
getResult("data/example.txt","rnaseq",0,0,0)
devtools::load_all()
getResult("data/example.txt","rnaseq",0,0,0)
devtools::load_all()
getResult("data/example.txt","rnaseq",0,0,0)
getResult("data/example.txt","rnaseq",0,0,0)
getResult("data/example.txt","rnaseq",0,0,0)
getResult = function(sample,data_type,group_tag,response_tag,customer,sig_file=NULL,exp_file=NULL,save_abun="Sample_abundance",save_group="Group_abundance",save_icb="ICB_response",save_plot="Group_comparison.png",save_bar="Abundance_barplot.png"){
if (customer==TRUE){
paper_marker<-self_sig(sig_file)
marker_exp=read.csv(exp_file,row.names=1,fill = TRUE,check.names = F,header=T)
}
sample=read.table(sample,header=T,sep="\t",check.names = F)
sample=as.matrix(sample)
if(ncol(sample)==2){
sam_name=colnames(sample)[2]
row.names(sample)=sample[,1]
sample=as.matrix(sample[,-1])
colnames(sample)=sam_name
}else{
row.names(sample)=sample[,1]
sample=sample[,-1]
}
#  sample=as.matrix(sample)
#  row.names(sample)=sample[,1]
#  sample=sample[,-1]
group_index=0
if (group_tag){
#group_index=as.numeric(as.vector(unlist(grep("group",row.names(sample)))))
group_column<-sample[1,]
group_content<<-sample[1,]
sample=sample[-1,]
}
sam = apply(sample,2,as.numeric)
row.names(sam) = row.names(sample)
tt = intersect(row.names(sam),as.vector(unlist(paper_marker)))
genes = intersect(tt,row.names(marker_exp))
sam_exp = as.matrix(sam[genes,])
colnames(sam_exp) = colnames(sample)
marker_exp = marker_exp[genes,]
marker_tag_mat = c()
for(cell in names(paper_marker)){
tag = marker_tag(genes,as.vector(unlist(paper_marker[cell])))
marker_tag_mat = cbind(marker_tag_mat,tag)
}
row.names(marker_tag_mat) = row.names(marker_exp)
colnames(marker_tag_mat) = names(paper_marker)
# progress$set(value = 20,detail = "Reconstructing sample ratio profile")
# Sys.sleep(0.1)
#  shinyWidgets::updateProgressBar(title = 'Reconstructing sample ratio profile',id = "pb2",value=20,session=getDefaultReactiveDomain())
exp_new = apply(sam_exp,2,function(x) sample_ratio(x,marker_exp,marker_tag_mat,data_type))
# progress$set(value = 30,detail = "ssgsea for abundance prediction")
# Sys.sleep(0.1)
# shinyWidgets::updateProgressBar(title = 'ssgsea for abundance prediction',id = "pb2",value=40,session=getDefaultReactiveDomain())
result = gsva(exp_new,paper_marker,method="ssgsea",ssgsea.norm=TRUE,parallel.sz=20)
if(ncol(result)<3){
result[which(result<0)]=0
}else{
result = result - apply(result,1,min)
#result[which(result<0)]=0
}
compensation_matrix_num = apply(compensation_matrix,2,as.numeric)
# progress$set(value = 20,detail = "Adjusting result by Compensation matrix")
# incProgress(0.2, detail = "Immune infiltration calculating")
# Sys.sleep(0.5)
# shinyWidgets::updateProgressBar(title = 'Immune infiltration calculating',id = "pb2",value=70,session=getDefaultReactiveDomain())
if(customer==0){
row.names(compensation_matrix_num) = row.names(compensation_matrix)
result_norm = compensation(result,compensation_matrix_num)
#result_norm = norm_func(result_adjust)
# incProgress(0.2, detail = "Immune infiltration calculating")
#Sys.sleep(0.5)
#shinyWidgets::updateProgressBar(title = 'Adjusting result by Compensation matrix',id = "pb2",value=90,session=getDefaultReactiveDomain())
if(ncol(result_norm)==1){
InfiltrationScore=sum(result_norm)
}else{
# print("error test")
if(nrow(result_norm)==24){
InfiltrationScore = apply(result_norm[c('Bcell','CD4_T','CD8_T','DC','Macrophage','Monocyte','Neutrophil','NK'),],2,sum)
}else{
InfiltrationScore = apply(result_norm,2,sum)
}
}
InfiltrationScore = (InfiltrationScore/max(InfiltrationScore))*0.9
result_mat = rbind(result_norm,InfiltrationScore)
}else{
result_mat=result
# print(head(result_norm))
}
if(ncol(result_mat)>1){
result_mat=apply(result_mat,1,function(x) round(x,3))
}else{
result_mat=t(round(result_mat,3))
}
if(group_tag){
group_name<-sort(unique(as.vector(unlist(group_column))))
p_va=c()
group_column<-as.numeric(as.factor(as.vector(unlist(group_column))))
result_group=cbind(result_mat,group_column)
result_tt=apply(result_group,2,as.numeric)
if (length(group_name)>2){
for (cell in colnames(result_group)){
result_group_new<-result_group[,c(cell,"group_column")]
t=aov(group_column~.,data.frame(result_group_new))
p_va=c(p_va,round(summary(t)[[1]][["Pr(>F)"]],2))
}
}else{
g1_index=grep(1,group_column)
g2_index=grep(2,group_column)
for (cell in colnames(result_mat)){
c_=wilcox.test(result_mat[g1_index,cell],result_mat[g2_index,cell])
p_va=c(p_va,round(c_$p.value,2))
}
}
p_va=p_va[-26]
row.names(result_tt)=row.names(result_group)
result_tt=data.frame(result_tt)
exp_median=aggregate(.~group_column,data=result_tt,median)
exp_median=rbind(exp_median[,-1],p_va)
#row.names(exp_median)=c(group_name,"p value")
row.names(exp_median)=c(group_name,"p value")
group_fre<<-exp_median
write.table(group_fre,save_group,sep="\t",quote=F,col.names = NA)
T_FRE<<-result_mat
plot_fun("boxplot",1,save_plot,customer)
}
if(response_tag){
feature=names(paper_marker[-c(23,24)])
df=data.frame(cbind(train_data[,feature],train_tag))
rlt1<- svm(as.numeric(as.factor(train_tag)) ~ ., data=df, kernel="radial",cross=5,type="eps-regression")
rlt<- svm(train_tag ~ ., data=df, kernel="radial",cross=5,type="C-classification")
pred_data=result_mat[,feature]
pred_result1=predict(rlt1,pred_data)
#print(pred_result1)
pred_result=predict(rlt,pred_data)
Response=as.vector(unlist( pred_result))
Score=round(as.vector(unlist( pred_result1)),3)
colnames(result_mat)=c("CD4_naive","CD8_naive","Cytotoxic","Exhausted","Tr1","nTreg","iTreg","Th1","Th2","Th17",
"Tfh","Central_memory","Effector_memory","NKT","MAIT","DC","B_cell","Monocyte","Macrophage","NK","Neutrophil","Gamma_delta","CD4_T","CD8_T","InfiltrationScore")
ICB_response<<-cbind(Response,Score,result_mat)
colnames(result_mat)=c("CD4_naive","CD8_naive","Cytotoxic","Exhausted","Tr1","nTreg","iTreg","Th1","Th2","Th17",
"Tfh","Central_memory","Effector_memory","NKT","MAIT","DC","B_cell","Monocyte","Macrophage","NK","Neutrophil","Gamma_delta","CD4_T","CD8_T","InfiltrationScore")
write.table(ICB_response,save_icb,sep="\t",quote=F,col.names = NA)
}
result_mat=as.matrix(result_mat)
#print(ncol(result_mat))
if(ncol(result_mat)==1){
colnames(result_mat)=colnames(sample)
T_FRE<<-t(result_mat)
}else{
T_FRE<<-result_mat
}
#  shinyWidgets::updateProgressBar(title = 'Done',id = "pb2",value=100,session=getDefaultReactiveDomain())
TAG<<-1
# incProgress(20, detail = "Done"
#print(head(result_mat))
# print(save_bar)
plot_fun("barplot",1,save_bar,customer)
write.table(result_mat,save_abun,sep="\t",quote=F,col.names = NA)
return(T_FRE)
# return(result_mat)
# })
}
re<-getResult("data/example.txt","rnaseq",0,0,0)
devtools::load_all()
re<-getResult("data/example.txt","rnaseq",0,0,0)
re<-getResult("data/example.txt","rnaseq",0,0,0)
devtools::load_all()
re<-getResult("data/example.txt","rnaseq",0,0,0)
T_FRE
T_FRE[,seq(1,ncol(T_FRE)-1)]
devtools::load_all()
getResult("data/example.txt","rnaseq",0,0,0)
devtools::load_all()
getResult("data/example.txt","rnaseq",0,0,0)
devtools::load_all()
getResult("data/example.txt","rnaseq",0,0,0)
devtools::load_all()
getResult("data/example.txt","rnaseq",0,0,0)
getResult("data/example.txt","rnaseq",0,0,0)
devtools::load_all()
getResult("data/example.txt","rnaseq",0,0,0)
document()
devtools::document()
build()
devtools::build()
install(ã€‚)
install(.)
devtools::install(.)
install("F:/workspace/ImmuCellAI_build/ImmuCellAI_0.1.0.tar.gz")
devtools::install("F:/workspace/ImmuCellAI_build/ImmuCellAI_0.1.0.tar.gz")
install("F:\workspace\ImmuCellAI_build\ImmuCellAI_0.1.0.tar.gz")
devtools::install_github(lydiaMyr/ImmuCellAI)
devtools::install_github(lydiaMyr/ImmuCellAI)
devtools::install_github(lydiaMyr/ImmuCellAI)
devtools::install(lydiaMyr/ImmuCellAI)
devtools::install(lydiaMyr/ImmuCellAI)
devtools::install("lydiaMyr/ImmuCellAI")
devtools::install_github("lydiaMyr/ImmuCellAI")
devtools::install_github("lydiaMyr/ImmuCellAI")
devtools::install_github("lydiaMyr/ImmuCellAI@main")
library(ImmuCellAI)
getResult("data/example.txt","rnaseq",0,0,0)
getwd()
getResult("data_raw/example.txt","rnaseq",0,0,0)
getResult("data-raw/example.txt","rnaseq",0,0,0)
devtools::load_all()
ImmuCellAI("data/example.txt","rnaseq",0,0,0)
ImmuCellAI("data-raw/example.txt","rnaseq",0,0,0)
devtools::load_all()
devtools::load_all()
devtools::install_github("lydiaMyr/ImmuCellAI@main")
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all
pkgload::load_all
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
usethis::use_data()
devtools::load_all()
usethis::use_package("GSVA")
usethis::use_package("gridExtra")
devtools::load_all()
ImmuCellAI("data-raw/example.txt",0,0,0)
ImmuCellAI("data-raw/example.txt","rnaseq",0,0,0)
usethis::use_data("ImmuCellAI_marker_7_23.Rdata")
usethis::use_data_raw("ImmuCellAI_marker_7_23.Rdata")
usethis::use_data_raw()
marker_exp=read.table("data-raw/ImmuCellAI_marker_exp.txt",header=T,row.names = 1,sep="\t")
save(marker_exp,file="data-raw/marker_exp.Rdata")
devtools::load_all()
ImmuCellAI("data-raw/example.txt","rnaseq",0,0,0)
usethis::use_data("ImmuCellAI_marker_7_23.Rdata")
usethis::use_data_raw("ImmuCellAI_marker_7_23.Rdata")
devtools::load_all()
usethis::use_data_raw("ImmuCellAI_marker_7_23.Rdata")
ImmuCellAI("data-raw/example.txt","rnaseq",0,0,0)
devtools::load_all()
document()
devtools::document()
devtools::build()
ImmuCellAI("data-raw/example.txt","rnaseq",0,0,0)
install(".")
devtools::install(".")
library(ImmuCellAI)
ImmuCellAI("data-raw/example.txt","rnaseq",0,0,0)
usethis::use_data()
usethis::use_data("DATASET")
usethis::use_data
usethis::use_data()
usethis::use_data()
devtools::load_all()
devtools::document()
devtools::build()
devtools::install_github("lydiaMyr/ImmuCellAI@main")
devtools::install(".")
library(ImmuCellAI)
ImmuCellAI("data-raw/example.txt","rnaseq",0,0,0)
load("ImmuCellAI_marker_7_23.Rdata")
load("ImmuCellAI_compensation_mat_7_16.Rdata")
load("marker_exp_T.Rdata")
load("immune_infiltrate_marker.Rdata")
load("train_data_new.Rdata")
load("train_tag_new.Rdata")
marker_exp=read.table("ImmuCellAI_marker_exp.txt",header=T,row.names = 1,sep="\t")
load("data/ImmuCellAI_marker_7_23.Rdata")
load("data/ImmuCellAI_compensation_mat_7_16.Rdata")
load("data/marker_exp_T.Rdata")
load("data/immune_infiltrate_marker.Rdata")
load("data/train_data_new.Rdata")
load("data/train_tag_new.Rdata")
marker_exp=read.table("data/ImmuCellAI_marker_exp.txt",header=T,row.names = 1,sep="\t")
ls()
usethis::use_data("compensation_matrix","immune_infiltate_marker","marker_exp","marker_exp_T","paper_marker","train_data","train_tag")
usethis::use_data_raw("compensation_matrix","immune_infiltate_marker","marker_exp","marker_exp_T","paper_marker","train_data","train_tag")
usethis::use_data_raw(c("compensation_matrix","immune_infiltate_marker","marker_exp","marker_exp_T","paper_marker","train_data","train_tag"))
usethis::iuseda
usethis::use_data()
usethis::use_data(paper_marker)
usethis::use_data(compensation_matrix,immune_infiltate_marker,marker_exp,marker_exp_T,paper_marker,train_data,train_tag)
usethis::use_data(compensation_matrix,immune_infiltate_marker,marker_exp,marker_exp_T,paper_marker,train_data,train_tag,overwrite = TRUE)
devtools::load_all()
devtools::document()
devtools::build()
devtools::install(".")
library("ImmuCellAI")
ImmuCellAI("data-raw/example.txt","rnaseq",0,0,0)
