library(GSVA)
library(ggplot2)
library(ggpubr)
library(e1071)
library(survival)
library(survminer)
library(KMsurv)
library(ggpubr)
library(gridExtra)
library(easyGgplot2)
load("data/ImmuCellAI_marker_7_23.Rdata")
load("data/ImmuCellAI_compensation_mat_7_16.Rdata")
load("data/marker_exp_T.Rdata")
load("data/immune_infiltrate_marker.Rdata")
load("data/train_data_new.Rdata")
load("data/train_tag_new.Rdata")
marker_exp=read.table("data/ImmuCellAI_marker_exp.txt",header=T,row.names = 1,sep="\t")
T_FRE=c()
sample_TIL=c()
group_fre=c()
TAG=0
ICB_response=NULL
group_content=c()
args <- commandArgs()
sample <- args[6]
data_type <- args[7]
group_tag <- as.numeric(args[8])
response_tag <- as.numeric(args[9])
customer <-as.numeric(args[10])
sig_file <- args[11]
exp_file  <- args[12]
save_abun <- args[13]
save_group <- args[14]
save_icb <- args[15]
save_plot <- args[16]
save_bar <- args[17]
self_sig=function(sig_file){
  ref_sig=read.csv(sig_file,row.names=1,fill = TRUE,check.names = F,header=F)
  paper_marker<-list()
  #compensation_matrix<<-compensation_matrix[,-6]
  for(cell in row.names(ref_sig)){paper_marker[[cell]]<-unique(as.vector(unlist(ref_sig[cell,])))}
  return(paper_marker)
}
getResult = function(sample,data_type,group_tag,response_tag,customer,sig_file=NULL,exp_file=NULL,save_abun=NULL,save_group=NULL,save_icb=NULL,save_plot=NULL,save_bar=NULL){
  if (customer==1){
      paper_marker<-self_sig(sig_file)
      marker_exp=read.csv(exp_file,row.names=1,fill = TRUE,check.names = F,header=T)
  }
  sample=read.table(sample,header=T,sep="\t",check.names = F)
  sample=as.matrix(sample)
  if(ncol(sample)==2){
    sam_name=colnames(sample)[2]
    row.names(sample)=sample[,1]
    sample=as.matrix(sample[,-1])
    colnames(sample)=sam_name
  }else{
    row.names(sample)=sample[,1]
    sample=sample[,-1]
  }
  #  sample=as.matrix(sample)
  #  row.names(sample)=sample[,1]
  #  sample=sample[,-1]
  group_index=0
  if (group_tag){
    #group_index=as.numeric(as.vector(unlist(grep("group",row.names(sample)))))
    group_column<-sample[1,]
    group_content<<-sample[1,]
    sample=sample[-1,]
  }
  sam = apply(sample,2,as.numeric)
  row.names(sam) = row.names(sample)
  tt = intersect(row.names(sam),as.vector(unlist(paper_marker)))
  genes = intersect(tt,row.names(marker_exp))
  sam_exp = as.matrix(sam[genes,])
  colnames(sam_exp) = colnames(sample)
  marker_exp = marker_exp[genes,]
  marker_tag_mat = c()
  for(cell in names(paper_marker)){
    tag = marker_tag(genes,as.vector(unlist(paper_marker[cell])))
    marker_tag_mat = cbind(marker_tag_mat,tag)
  }
  row.names(marker_tag_mat) = row.names(marker_exp)
  colnames(marker_tag_mat) = names(paper_marker)
  # progress$set(value = 20,detail = "Reconstructing sample ratio profile")
  # Sys.sleep(0.1)
#  shinyWidgets::updateProgressBar(title = 'Reconstructing sample ratio profile',id = "pb2",value=20,session=getDefaultReactiveDomain())
  exp_new = apply(sam_exp,2,function(x) sample_ratio(x,marker_exp,marker_tag_mat,data_type))
  # progress$set(value = 30,detail = "ssgsea for abundance prediction")
 # Sys.sleep(0.1)
 # shinyWidgets::updateProgressBar(title = 'ssgsea for abundance prediction',id = "pb2",value=40,session=getDefaultReactiveDomain())
  result = gsva(exp_new,paper_marker,method="ssgsea",ssgsea.norm=TRUE,parallel.sz=20)
  if(ncol(result)<3){
    result[which(result<0)]=0
  }else{
    result = result - apply(result,1,min)
    #result[which(result<0)]=0
  }
  compensation_matrix_num = apply(compensation_matrix,2,as.numeric)
  # progress$set(value = 20,detail = "Adjusting result by Compensation matrix")
  # incProgress(0.2, detail = "Immune infiltration calculating")
 # Sys.sleep(0.5)
 # shinyWidgets::updateProgressBar(title = 'Immune infiltration calculating',id = "pb2",value=70,session=getDefaultReactiveDomain())
  if(customer==0){
    row.names(compensation_matrix_num) = row.names(compensation_matrix)
    result_norm = compensation(result,compensation_matrix_num)
    #result_norm = norm_func(result_adjust)
    # incProgress(0.2, detail = "Immune infiltration calculating")
    #Sys.sleep(0.5)
    #shinyWidgets::updateProgressBar(title = 'Adjusting result by Compensation matrix',id = "pb2",value=90,session=getDefaultReactiveDomain())
    if(ncol(result_norm)==1){
      InfiltrationScore=sum(result_norm)
    }else{
      # print("error test")
      if(nrow(result_norm)==24){
          InfiltrationScore = apply(result_norm[c('Bcell','CD4_T','CD8_T','DC','Macrophage','Monocyte','Neutrophil','NK'),],2,sum)
      }else{
          InfiltrationScore = apply(result_norm,2,sum)
      }
    }
    InfiltrationScore = (InfiltrationScore/max(InfiltrationScore))*0.9
    result_mat = rbind(result_norm,InfiltrationScore)
  }else{
    result_mat=result
    # print(head(result_norm))
  }
  if(ncol(result_mat)>1){
    result_mat=apply(result_mat,1,function(x) round(x,3))
  }else{
    result_mat=t(round(result_mat,3))
  }

  if(group_tag){
    group_name<-sort(unique(as.vector(unlist(group_column))))
    p_va=c()
    group_column<-as.numeric(as.factor(as.vector(unlist(group_column))))
    result_group=cbind(result_mat,group_column)
    result_tt=apply(result_group,2,as.numeric)
    if (length(group_name)>2){
      for (cell in colnames(result_group)){
        result_group_new<-result_group[,c(cell,"group_column")]
        t=aov(group_column~.,data.frame(result_group_new))
        p_va=c(p_va,round(summary(t)[[1]][["Pr(>F)"]],2))
      }
    }else{
      g1_index=grep(1,group_column)
      g2_index=grep(2,group_column)
      for (cell in colnames(result_mat)){
        c_=wilcox.test(result_mat[g1_index,cell],result_mat[g2_index,cell])
        p_va=c(p_va,round(c_$p.value,2))
      }
    }
    p_va=p_va[-26]
    row.names(result_tt)=row.names(result_group)
    result_tt=data.frame(result_tt)
    exp_median=aggregate(.~group_column,data=result_tt,median)
    exp_median=rbind(exp_median[,-1],p_va)
    #row.names(exp_median)=c(group_name,"p value")
    row.names(exp_median)=c(group_name,"p value")
    group_fre<<-exp_median
    write.table(group_fre,save_group,sep="\t",quote=F,col.names = NA)
    T_FRE<<-result_mat
    plot_fun("boxplot",1,save_plot)
  }
  if(response_tag){
    feature=names(paper_marker[-c(23,24)])
    df=data.frame(cbind(train_data[,feature],train_tag))
    rlt1<- svm(as.numeric(as.factor(train_tag)) ~ ., data=df, kernel="radial",cross=5,type="eps-regression")

    rlt<- svm(train_tag ~ ., data=df, kernel="radial",cross=5,type="C-classification")
    pred_data=result_mat[,feature]
    pred_result1=predict(rlt1,pred_data)
    #print(pred_result1)
    pred_result=predict(rlt,pred_data)
    Response=as.vector(unlist( pred_result))
    Score=round(as.vector(unlist( pred_result1)),3)
    colnames(result_mat)=c("CD4_naive","CD8_naive","Cytotoxic","Exhausted","Tr1","nTreg","iTreg","Th1","Th2","Th17",
                           "Tfh","Central_memory","Effector_memory","NKT","MAIT","DC","B_cell","Monocyte","Macrophage","NK","Neutrophil","Gamma_delta","CD4_T","CD8_T","InfiltrationScore")
    ICB_response<<-cbind(Response,Score,result_mat)
    colnames(result_mat)=c("CD4_naive","CD8_naive","Cytotoxic","Exhausted","Tr1","nTreg","iTreg","Th1","Th2","Th17",
                           "Tfh","Central_memory","Effector_memory","NKT","MAIT","DC","B_cell","Monocyte","Macrophage","NK","Neutrophil","Gamma_delta","CD4_T","CD8_T","InfiltrationScore")
    write.table(ICB_response,save_icb,sep="\t",quote=F,col.names = NA)
  }
  result_mat=as.matrix(result_mat)
  #print(ncol(result_mat))
  if(ncol(result_mat)==1){
    colnames(result_mat)=colnames(sample)
    T_FRE<<-t(result_mat)
  }else{
    T_FRE<<-result_mat
  }

#  shinyWidgets::updateProgressBar(title = 'Done',id = "pb2",value=100,session=getDefaultReactiveDomain())
  TAG<<-1
  # incProgress(20, detail = "Done"
  #print(head(result_mat))
  plot_fun("barplot",1,save_bar,customer)
  write.table(result_mat,save_abun,sep="\t",quote=F,col.names = NA)
 # return(result_mat)
  # })
}

immune_infiltate_calculate=function(exp,gene_name,data_type,pre_result){
  inf = 0
  names(exp) = gene_name
  for (cell in names(immune_infiltate_marker)){
    abun = 0
    markers = as.vector(unlist(immune_infiltate_marker[cell]))
    for (gene in markers){
      if(data_type == "microarray"){
        abun = abun + as.numeric(exp[gene])/marker_exp_T[gene,cell]
      }else{
        abun = abun + as.numeric(log2(exp[gene]+1))/marker_exp_T[gene,cell]
      }
    }
    inf = inf+abun/length(as.vector(unlist(immune_infiltate_marker[cell])))
  }
  return(inf)
}
marker_tag = function(comgenes,tag_gene){
  a = comgenes
  a[which(comgenes%in%tag_gene)] = 1
  a[which(a!=1)] = 0
  a = as.numeric(a)
  return(a)
}
sample_ratio = function(data,marker_exp,marker_tag_mat,data_type){
  exp = 0
  if(data_type == "microarray"){
    for (cell in colnames(marker_exp)){
      exp = exp+data/(marker_exp[,cell])*marker_tag_mat[,cell]
    }
  }else{
    for (cell in colnames(marker_exp)){
      exp = exp+log2(data+1)/marker_exp[,cell]*marker_tag_mat[,cell]
    }
  }
  return(exp)
}
compensation = function(raw_score,compensation_matrix){
  raw_score=as.matrix(raw_score)
  compensation_matrix = compensation_matrix
  diag(compensation_matrix) = 1
  rows <- rownames(raw_score)[rownames(raw_score) %in%  rownames(compensation_matrix)]
  if(ncol(raw_score)==1){
    scores <- as.matrix(pracma::lsqlincon(compensation_matrix[rows,rows], raw_score, lb = 0))
  }else{
    scores <- apply(raw_score[rows,], 2, function(x) pracma::lsqlincon(compensation_matrix[rows,rows], x, lb = 0))

  }
  scores[scores < 0] = 0
  rownames(scores) <- rows
  return(scores)
}
plots<-list()
plot_fun=function(figure_type,group_tag,save_plot,customer){
  if(customer==0){
    data=T_FRE[,seq(1,ncol(T_FRE)-1)]
    colnames(data)<-c("CD4 naive","CD8 naive","Tc","Tex","Tr1","nTreg","iTreg","Th1","Th2","Th17","Tfh","Tcm","Tem","NKT","MAIT","DC","B cell","Monocyte","Macrophage","NK","Neutrophil","Tgd","CD4 T","CD8 T")
    p=NULL
    N=nrow(data)
    count=ncol(data)
    groups=as.factor(as.vector(unlist(group_content)))
  }else{
    data=T_FRE
    count=ncol(data)
    p=NULL
    N=nrow(data)
  }
  if ((group_tag)&&(figure_type=="boxplot")){
    plot_index<-0
    for (cell in (colnames(data))){
      #  Sys.sleep(0.55)
      plot_index=plot_index+1
      cell_plot(data[,plot_index],plot_index,groups,cell)
      #incProgress(0.04, detail = cell)
    }
    #incProgress(0.02, detail = "Multiplot generating")
   # pdf(paste(save_plot,".pdf",sep=""),16,4)
   # ggplot2.multiplot(plotlist = plots,cols = 12)
   # dev.off()
    png(save_plot,bg="transparent",width =1500 ,height=400)
    ggplot2.multiplot(plotlist = plots,cols = 12)
    dev.off()
    #group_box_figure<<-ggarrange(plotlist = plots,ncol=12)
    group_tag<<-1
   # withProgress(message = 'Creating plot', value = 0.1, {

      #incProgress(0.02, detail = "Done")
  }
    #print(group_box_figure)

  if(figure_type=="barplot"){
  #  print("Draw barplot")
    x=rep(row.names(data),each=count)
    y=c()
    p=NULL
    for(i in seq(1,N)){
      y=c(y,as.numeric(data[i,]))
    }
    df=data.frame(x=x,y=y)
    cell_type=rep(colnames(data),times=N)
    #print(head(df))
    #p1=ggplot(df, mapping = aes(x = x, y = y, fill = cell_type)) + xlab("Sample")+ylab("Abundance")+geom_bar(stat = 'identity',position = 'fill',width=0.3)+theme(legend.text=element_text(size=12),axis.text.y=element_text(size=14),axis.text.x=element_text(angle=90,hjust = 0.5,vjust=0.5,size=14))+scale_fill_discrete(name="Cell type")+theme(panel.background = element_rect(fill='#EDEDED', colour='#EDEDED'))+
     # theme(plot.margin=unit(x=c(0,0,0,0),units="mm"),plot.background = element_rect(fill="#EDEDED"))+theme(axis.title.x = element_text(size = 16),axis.title.y = element_text(size = 16))

    png(save_bar,bg="transparent",width =1500 ,height=400)
    p<-ggplot(df, mapping = aes(x = x, y = y, fill = cell_type)) + xlab("Sample")+ylab("Abundance")+geom_bar(stat = 'identity',position = 'fill',width=0.3)+theme(legend.text=element_text(size=12),axis.text.y=element_text(size=14),axis.text.x=element_text(angle=90,hjust = 0.5,vjust=0.5,size=14))+scale_fill_discrete(name="Cell type")+theme(panel.background = element_rect(fill='#EDEDED', colour='#EDEDED'))+theme(plot.margin=unit(x=c(0,0,0,0),units="mm"),plot.background = element_rect(fill="#EDEDED"))+theme(axis.title.x = element_text(size = 16),axis.title.y = element_text(size = 16))
    print(p)
    dev.off()

    #return(p1)
  }

}
getResult_cancer=function(cancer_type){
  load(paste("data/",cancer_type,"_predicted_result.Rdata",sep=""))
  colnames(predict_result)=c("CD4 naive","CD8 naive","Tc","Tex","Tr1","nTreg","iTreg","Th1","Th2","Th17",
                             "Tfh","Tcm","Tem","NKT","MAIT","DC","B cell","Monocyte","Macrophage","NK","Neutrophil","Tgd","CD4 T","CD8 T","InfiltrationScore")
  return(predict_result)

}
#STES

cell_plot=function(fra,plot_index,group,celltype){
  #df$fra=as.numeric(c((pre_fra[,"iTreg"]+pre_fra[,"nTreg"]+pre_fra[,"Tr1"]),(on_fra[,"iTreg"]+on_fra[,"nTreg"]+on_fra[,"Tr1"])))
  df=data.frame(x=as.factor(as.numeric(group)),y=fra)
  if(length(unique(group))>2){
    p=ggplot(df,mapping= aes(x=x, y=y,fill=as.factor(group)))+theme(axis.text.x=element_text(angle=50,hjust = 0.5,vjust=0.5))+
      theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),axis.line = element_line(colour = "black",size = 0.2),plot.title = element_text(hjust = 0.5,size = 8))+
      labs(title =celltype,x=NULL,y=NULL)+theme(legend.position='none',axis.text.x =element_text(size=16), axis.text.y=element_text(size=16),plot.title = element_text(size=16))+geom_boxplot(width=0.5)+stat_compare_means(method = "anova",label = "p.signif")

  }else{
    p=ggplot(df,mapping= aes(x=x, y=y,fill=as.factor(group)))+theme(axis.text.x=element_text(angle=50,hjust = 0.5,vjust=0.5))+scale_fill_manual(values=c("#0077c8","#e84118"))+
      theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),axis.line = element_line(colour = "black",size = 0.2),plot.title = element_text(hjust = 0.5,size = 8))+
      labs(title =celltype,x=NULL,y=NULL)+theme(legend.position='none',axis.text.x =element_text(size=16), axis.text.y=element_text(size=16),plot.title = element_text(size=16))+geom_boxplot(width=0.5)+stat_compare_means(method = "wilcox",label = "p.format")
  }
  plots[[plot_index]]<<-p
}
my_comparisons=list(c("Adj.BLCA","tumor.BLCA"),c("Adj.BRCA","tumor.BRCA"),c("Adj.CHOL","tumor.CHOL"),c("Adj.COAD","tumor.COAD"),
                    c("Adj.ESCA","tumor.ESCA"),c("Adj.HNSC","tumor.HNSC"),c("Adj.KICH","tumor.KICH"),c("Adj.KIRP","tumor.KIRP"),
                    c("Adj.KIRC","tumor.KIRC"),c("Adj.LIHC","tumor.LIHC"),c("Adj.LUAD","tumor.LUAD"),c("Adj.LUSC","tumor.LUSC"),
                    c("Adj.PRAD","tumor.PRAD"),c("Adj.READ","tumor.READ"),c("Adj.STAD","tumor.STAD"),c("Adj.THCA","tumor.THCA"),
                    c("Adj.UCEC","tumor.UCEC"))

paired_ls=c("BLCA","BRCA","CHOL","COAD","KICH","KIRC","KIRP","ESCA","HNSC","LIHC","LUAD","LUSC","PRAD","READ","STAD","THCA","UCEC")
tcga_cancer_diff_plot=function(cells){
  splots=list()
  plot_index=0
  cell_ls=as.vector(unlist(strsplit(cells," ")))
  for (cell in cell_ls){
    plot_index=plot_index+1
    norm_fra=c()
    tumor_fra=c()
    cancer=c()
    sample=c()
    fra=c()
    for (i in paired_ls){
      load(paste("data/",i,"_predicted_result.Rdata",sep=""))
      all_ratio=predict_result[,-25]
      #  all_ratio=predict_result[,-25]
      sample_name=row.names(all_ratio)
      sampleid=sapply(sample_name,function(x) unlist(strsplit(x,"\\."))[[4]])
      sample_type=sapply(sample_name,function(x) unlist(strsplit(x,"\\."))[[4]])
      tumor=grep("0[1-9]",sample_type)
      norm=grep("1[0-9]",sample_type)
      tumor_id=sample_name[tumor]
      norm_id=sample_name[norm]
      tumor_name=sapply(tumor_id,function(x) unlist(strsplit(x,"\\."))[[3]])
      names(tumor_id)=tumor_name
      norm_name=sapply(norm_id,function(x) unlist(strsplit(x,"\\."))[[3]])
      names(norm_id)=norm_name
      norm_ratio=all_ratio[norm_id,cell]
      tumor_ratio=all_ratio[tumor_id,cell]
      fra=c(fra,c(norm_ratio,tumor_ratio))
      n_len=length(norm_ratio)
      t_len=length(tumor_ratio)
      cancer=c(cancer,rep(i,times=n_len+t_len))
      sample=c(sample,c(rep("Adj",times=n_len),rep("tumor",times=t_len)))

    }
    df=data.frame(cells=cancer,sample=sample,Abundance=fra)
    splots[[plot_index]]=ggplot(df,aes(x=interaction(sample,cells),y=Abundance,color=sample))+geom_boxplot()+labs(title =cell)+theme(axis.text.x=element_text(angle=90,hjust = 0.5,vjust=0.5))+stat_compare_means(method = "wilcox",label="p.signif",paired = FALSE,comparisons = my_comparisons,label.x=1,label.y=max(fra))+theme(legend.position='none',axis.text.x =element_text(size=16), axis.text.y=element_text(size=16),plot.title = element_text(size=16))+labs(x=NULL,y=NULL)
    p=ggplot(df,aes(x=interaction(sample,cells),y=Abundance,color=sample))+geom_boxplot()+labs(title =cell)+theme(axis.text.x=element_text(angle=90,hjust = 0.5,vjust=0.5))+stat_compare_means(method = "wilcox",label="p.signif",paired = FALSE,comparisons = my_comparisons,label.x=1,label.y=max(fra))+theme(legend.position='none',axis.text.x =element_text(size=16), axis.text.y=element_text(size=16),plot.title = element_text(size=16))+labs(x=NULL,y=NULL)
    png(file=paste(cell,"_tcga_diff.png",sep=""), bg="transparent",width =1200 ,height=500)
    print(p)
    dev.off()
  }
  #ggplot2.multiplot(plotlist=splots,cols=1)
}
cox_re=list()
splots=list()
plot_index=0
cox_regression=function(cancer, cell){
  cancers=as.vector(unlist(strsplit(cancer," ")))
  cells=as.vector(unlist(strsplit(cell," ")))
  # print(cancers)
  # print(cells)
  result=c()
  for (i in cancers){
    data<-read.delim(file=paste("data/",i,".clin.merged.picked.txt",sep=""),header=T,row.names=1)
    sample_id=colnames(data)
    sample_id=(sapply(sample_id,function(x) unlist(strsplit(x,"\\."))[[3]]))
    data=data.frame(data)
    new_data=apply(data,2,function(x) as.vector(x))
    data_ls=c()
    for(j in seq(1,nrow(new_data))){
      tmp=new_data[j,]
      tmp[is.na(tmp)]=0
      data_ls=rbind(data_ls,tmp)
    }
    row.names(data_ls)=row.names(data)
    colnames(data_ls)=colnames(data)
    data=data_ls
    if(!(i %in% c("UCEC","SARC","PCPG","PRAD","UVM","UCS","OV"))){
      #if ((i!="UCEC")&&(i!="SARC")&&((i!="PCPG"))){
      OS=(as.numeric(data[4,])+as.numeric(data[5,]))/30
      survival=data[3,]
      age=data[2,]
      gender=data["gender",]
      data_new=rbind(survival,OS,age,gender)
      if(length(grep("pathologic_stage",row.names(data)))>0){
        stage=data["pathologic_stage",]
        data=rbind(data_new,stage)
      }else{
        data=data_new
      }
    }
    if (i=="UCEC"){
      OS=(as.numeric(data[4,])+as.numeric(data[3,]))/30
      survival=data[2,]
      data=rbind(survival,OS)
    }
    if(i %in% c("SARC","PCPG","PRAD","UVM","UCS","OV")){
      #if((i=="SARC")||(i=="PCPG"){
      OS=(as.numeric(data[4,])+as.numeric(data[5,]))/30
      survival=data[3,]
      age=data[2,]
      data=rbind(survival,OS,age)
    }
    data_t=t(data)
    #data_t=apply(data_t,2,as.numeric)
    row.names(data_t)=toupper(sample_id)
    #加载预测结果
    load(paste("data/",i,"_predicted_result.Rdata",sep=""))
    proportion=predict_result
    #proportion=read.table(paste(i,".txt",sep=""),header=T,row.names=1)
    sample_type=sapply(row.names(proportion),function(x) unlist(strsplit(x,"\\."))[[4]])
    tumor=grep("0[1-9]",sample_type)
    proportion=proportion[tumor,cells]
    # if ((i!="LAML")&&(i!="UCEC")){
    #   index=grep("-11A",row.names(proportion))
    #   proportion=proportion[index,]
    #
    proportion_sample=sapply(row.names(proportion),function(x) unlist(strsplit(x,"\\."))[[3]])
    proportion=cbind(proportion_sample,proportion)
    proportion=proportion[!duplicated(proportion[,1]),]
    row.names(proportion)=proportion[,1]
    proportion=proportion[,-1]
    common=intersect(proportion_sample,row.names(data_t))
    surv_sam=data_t[common,]
    proportion=proportion[common,]
    new_data=data.frame(cbind(surv_sam,proportion))
    # new_index=which(new_data$OS>0)
    # new_data=new_data[new_index,]
    new_data=data.frame(new_data)
    # print(colnames(new_data))
    if(length(grep("stage",colnames(new_data)))>0){
      stage=new_data$stage
      if(length(grep(TRUE,is.na(stage)))>0){
        stage_index=which(colnames(new_data)=="stage")
        new_data=new_data[,-stage_index]
      }else{
        new_data$stage=as.numeric(as.factor(stage))
      }
    }
    if(length(grep("gender",colnames(new_data)))>0){
      gender=new_data$gender
      new_data$gender=as.numeric(as.factor(new_data$gender))
    }
    # row.names(num_data)=row.names(new_data)
    new_data=apply(new_data,2,as.numeric)
    new_data=data.frame(new_data)
    coxmodel=coxph(Surv(OS,survival)~.,data=new_data)
    cox_re[[i]]<<-coxph(Surv(OS,survival)~.,data=new_data)
    sum_cox=summary(coxmodel)
    coef=sum_cox$coefficients[,"exp(coef)"]
    for (cell in cells){
      coef_cell=as.numeric(coef[cell])
      surv_data=data.frame(cbind(proportion[,cell],surv_sam[,c(1,2)]))
      plot_index<<-plot_index+1
      surv_func(surv_data,i,cell,round(coef_cell,4))
    }
  }
}


surv_func=function(num_data,cancer,cell,hr){
  data=num_data
  cell_ratio <- as.vector(data[,1])
  Time.dfs<-as.numeric(as.vector(data[,3]))
  cen.status<-as.vector(as.numeric(data[,2]))
  cell_ratio.refined <- cell_ratio
  cutgroup <- ifelse(as.vector(cell_ratio.refined) <= median(as.vector(cell_ratio.refined)), "Low","High")
  if(length(unique(cutgroup))>1){
    test.low.high <- list(time = Time.dfs, status = cen.status, group = as.factor(cutgroup))
    model1 <- survdiff(Surv(time, status) ~ group, data= test.low.high, na.action=na.exclude)
    p_value<-1-pchisq(model1$chisq, df=length(levels(factor(cutgroup)))-1)
    #fit <- survfit(Surv(time, status) ~ group, data=test.low.high, na.action=na.exclude)
    fit<-do.call(survival::survfit, list(formula = Surv(time, status) ~ group, data = test.low.high))
    result<-summary(fit)
    group_class<-result$strata
    high_x<-result$time[max(grep("TRUE",group_class=="group=High"))]-5
    low_x<-result$time[max(grep("TRUE",group_class=="group=Low"))]-5
    high_y<-result$surv[max(grep("TRUE",group_class=="group=High"))]+0.1
    low_y<-result$surv[max(grep("TRUE",group_class=="group=Low"))]
    high_num<-length(grep("TRUE",group_class=="group=High"))
    low_num<-length(grep("TRUE",group_class=="group=Low"))
    #    va=paste("HR=",hr,",",round(p_value,4),sep="")
    ggsurv=ggsurvplot(fit,pval=as.numeric(format(p_value,scientific=TRUE)),palette = c("#E7B800", "#2E9FDF"), ggtheme = theme_bw(),legend.title = paste(cancer,cell,sep="_"),legend.labs = c("High", "Low"),font.x = 14,font.y=14,font.main=14)+xlab("Months")
    ggsurv$plot=ggsurv$plot+ggplot2::annotate("text",
                                              x = high_x, y = high_y, # x and y coordinates of the text
                                              label = high_num, size = 5)+ggplot2::annotate("text",
                                                                                            x = low_x, y = low_y, # x and y coordinates of the text
                                                                                            label = low_num, size = 5)+ggplot2::annotate("text",
                                                                                                                                         x = 45, y = 0, # x and y coordinates of the text
                                                                                                                                         label = paste("HR=",hr,sep=""), size = 5)

    splots[[plot_index]] <<- ggsurv
    ggpubr::ggpar(splots[[plot_index]],
                  font.legend = list(size = 14, color = "black"))
    # splots[[plot_index]] <<- ggsurvplot(fit,pval=round(p_value,4),palette = c("#E7B800", "#2E9FDF"), ggtheme = theme_bw(),legend.title = paste(cancer,cell,sep="_"),legend.labs = c("High", "Low"),font.x = 14,font.y=14,font.main=14)
    #  ggpubr::ggpar(splots[[plot_index]],
    #             font.legend = list(size = 14, color = "black"))
  }else{
    plot_index<<-plot_index-1
  }

}

#getResult(sample,data_type,group_tag,response_tag,customer,sig_file,exp_file,save_abun,save_group,save_icb,save_plot,save_bar)
